esphome:
  name: central-thermo
  friendly_name: Central Thermo

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret central_thermo_api_key

ota:
  - platform: esphome
    password: !secret central_thermo_ota_pass

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Central-Thermo Fallback Hotspot"
    password: !secret central_thermo_ap_pass

time:
  - platform: homeassistant
    id: ha_time
    timezone: "America/Chicago"
    on_time:
      - seconds: 0
        minutes: '*'
        then:
          - if:
              condition: # added this one to allow kind of async check if something changes on climate thus helping to prevent many call to script.
                - lambda: return int(id(check_state_after_min).state) > 0; 
              then:
                - logger.log:
                    level: DEBUG
                    format: "Check state after a min called so running idle script check." 
                - number.to_min: check_state_after_min
                - lambda: |-
                    id(check_fan_idle_script).execute();

captive_portal:
i2c:
  sda: GPIO08
  scl: GPIO09
  scan: true
  id: bus_a
  frequency: 100kHz

web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password
                    
                    


switch:
  - platform: gpio
    pin: GPIO05
    name: "Reversing Valve"
    id: rev
    inverted: False

  - platform: gpio
    pin: GPIO06
    id: furn_cool_low
    name: "Furnace Cool Low"
    inverted: False
  
  - platform: gpio
    pin: GPIO07
    id: furn_cool_high
    name: "Furnace Cool High"
    inverted: False
    
  - platform: gpio
    pin: GPIO04
    id: fan1
    name: "Fan"
    inverted: False
    on_turn_off:
      then:
        - number.increment: 
            id: check_state_after_min
            cycle: False

  - platform: gpio
    pin: GPIO16
    id: w2
    name: "Full Heat"
    inverted: False

  - platform: gpio
    pin: GPIO15
    id: w1
    name: "Heat Low"

  - platform: gpio
    pin: GPIO17
    id: comp1
    name: "HP Compressor Low"

  - platform: gpio
    pin: GPIO18
    id: comp2
    name: "HP Compressor High"

  - platform: template
    id: run_fan_on_idle
    name: "Run Fan On Idle"
    optimistic: True
    on_turn_on: 
      then:
        - script.execute:
            id: check_fan_idle_script
    on_turn_off:
      then:
        - script.execute:
            id: check_fan_idle_script
  - platform: template
    id: user_forced_no_hp
    name: "No Heatpump Heating"
    optimistic: True
    on_turn_on: 
      then:
        - select.set_index:
            id: heating_level
            index: 0
        - script.execute:
            id: call_heat_action
    on_turn_off:
      then:
        - select.set_index:
            id: heating_level
            index: 0
        - switch.turn_off: force_furnace_mode # have to call this before the script below so it is in the proper state ahead of the script. This is because this has to real states one set by user and one set by script so it has to be reset manually here.
        - script.execute:
            id: call_heat_action

  - platform: template
    id: force_furnace_mode
    optimistic: True
              
    
number:
  - platform: template
    id: high_low_gap
    name: "High Low Temp Gap"
    min_value: 0.2
    max_value: 8.0
    set_action: 
      then:
        - lambda: 
            id(high_low_gap).publish_state(x);
    step: 0.1
    on_value: 
      then:
        - lambda: !lambda |-
            id(therm_control1).set_set_point_minimum_differential(float((x-32.0)/1.8));
  - platform: template
    id: fan_run_min_idle
    name: "Fan run on idle"
    initial_value: 10
    min_value: 1
    max_value: 20
    step: 1
    set_action: 
      then:
        - lambda: 
            id(fan_run_min_idle).publish_state(x);
  - platform: template
    id: fan_wait_min_idle
    name: "Fan Idle Minutes Until Run"
    initial_value: 60
    min_value: 20
    max_value: 120
    step: 1
    set_action: 
      then:
        - lambda: 
            id(fan_wait_min_idle).publish_state(x);
  - platform: template
    id: fan_idle_running
    initial_value: 0
    min_value: 0
    max_value: 1
    step: 1
    set_action: 
      then:
        - lambda: 
            id(fan_idle_running).publish_state(x);
  - platform: template
    id: check_state_after_min
    initial_value: 0
    min_value: 0
    max_value: 1
    step: 1
    set_action: 
      then:
        - lambda: 
            id(check_state_after_min).publish_state(x);
  - platform: template
    id: in_defrost_mode
    initial_value: 0
    min_value: 0
    max_value: 1
    step: 1
    set_action: 
      then:
        - lambda: 
            id(in_defrost_mode).publish_state(x);
  
  
select:
  - platform: template
    id: heating_level #added this to keep track of level of supplement heat applied at this time. Reset by idle action. Incremented in supplimental heating action.
    name: "Current Heating Mode"
    options:
     - "Idle"
     - "HP Heat Low"
     - "HP Heat High"
     - "Furnace Heat Low"
     - "Furnace Heat High"
    initial_option: "Idle"
    set_action: 
      then:
        - lambda: 
            id(heating_level).publish_state(x);
        - logger.log:
            level: DEBUG
            format: "Heat level changed to: %s"
            args: ["x.c_str()"]
        
          
   
            

binary_sensor:
  - platform: gpio
    pin: GPIO45
    id: out_temp_ok_in
    name: "Outside Temp Status"
    filters:
      - delayed_on_off: 4s
    on_press: 
      then:
        - if:
            condition: # If heating and this turns on then switch over to comp1 since it is warm enough and it is not already running w2 heat state
              - lambda: return id(therm_control1).action == CLIMATE_ACTION_HEATING && !id(comp1).state && id(w2).state && !id(defrost_mode_in).state;
            then:
              - switch.turn_off: w1
              - switch.turn_off: w2
              - switch.turn_on: furn_cool_low
              - switch.turn_on: comp1
    on_release:
      then:
        - if:
            condition: # In heating mode and external temp dropped too low so now turn off compressor and go with furnace only.
              - lambda: return id(therm_control1).action == CLIMATE_ACTION_HEATING && !id(w1).state && !id(w2).state && (id(comp1).state || id(comp2).state);
            then:
              - switch.turn_off: comp1
              - switch.turn_off: comp2
              - switch.turn_off: furn_cool_low
              - switch.turn_off: furn_cool_high
              - switch.turn_on: w1



      
  - platform: gpio
    pin: GPIO47
    id: defrost_mode_in
    name: "Defrost Mode"
    filters:
      - delayed_on_off: 2s
    on_press:
      then:
        - if:
            condition:
              - lambda: return id(therm_control1).action == CLIMATE_ACTION_HEATING && id(out_temp_ok_in).state;
            then:
              - switch.turn_on: comp1
              - switch.turn_off: comp2
              - switch.turn_off: furn_cool_low  
              - switch.turn_off: furn_cool_high
              - switch.turn_on: w1
              - number.increment: 
                  id: in_defrost_mode
                  cycle: False
              - logger.log:
                  level: INFO
                  format: "HP Called for Defrost." 
            else:
              - logger.log:
                  level: WARN
                  format: "HP Defrost start ignored. Monitored states heat action: %d, w1 state %d, out_time_ok_in %d, heating mode: %d"
                  args: ["id(therm_control1).action" , "id(w1).state", "id(out_temp_ok_in).state", "id(therm_control1).mode"]
    on_release: 
      then:
        - if:
            condition: # In heating and warm enough to run HP so turn off w1 if it is on or for some reason defost is shutdown and not in heating mode make sure to kill w1.
              - lambda: return (id(therm_control1).action == CLIMATE_ACTION_HEATING && id(out_temp_ok_in).state && id(w1).state) || (!id(therm_control1) == CLIMATE_ACTION_HEATING && id(w1).state);
            then:
              - lambda: |-
                    id(check_fan_idle_script).execute();
              - number.decrement: 
                  id: in_defrost_mode
                  cycle: False
              - logger.log:
                  level: INFO
                  format: "HP ended Defrost."
            else:
              - logger.log:
                  level: WARN
                  format: "HP Defrost end ignored. Monitored states heat action: %d, w1 state %d, out_time_ok_in %d, heating mode: %d"
                  args: ["id(therm_control1).action" , "id(w1).state", "id(out_temp_ok_in).state", "id(therm_control1).mode"]

  
sensor:
  - platform: homeassistant
    id: current_temperature
    entity_id: sensor.average_home_temperature
    filters:
      - lambda: return (x - 32.0) / 1.8;
  
script:
  - id: fan_duty_script
    mode: queued # want it to complete the current script but queue up a new one if script reran at right point. 
    # That is why queued istead of restart.
    then:
      - if:
          condition:
            and:
              - switch.is_on: run_fan_on_idle
              - lambda: return id(therm_control1).action == CLIMATE_ACTION_IDLE && id(therm_control1).mode != CLIMATE_MODE_OFF;
          then: 
            - logger.log:
                level: DEBUG
                format: "Before run delay: %d min after run delay %d min." 
                args: ["int(id(fan_wait_min_idle).state)", "int(id(fan_run_min_idle).state)" ]  
            - number.increment: 
                id: fan_idle_running
                cycle: False
            - delay: !lambda return (int(id(fan_wait_min_idle).state) * 60000);
            - if:
                condition:
                  - lambda: return id(therm_control1).action == CLIMATE_ACTION_IDLE;
                then:
                  - switch.turn_on: fan1
                  - logger.log:
                      level: DEBUG
                      format: "At run delay: %d min after run delay %d min." 
                      args: ["int(id(fan_wait_min_idle).state)", "int(id(fan_run_min_idle).state)"]    
                  - delay: !lambda return (int(id(fan_run_min_idle).state) * 60000);
                  - if:
                      condition:
                        - lambda: return id(therm_control1).action == CLIMATE_ACTION_IDLE;
                      then:
                        - number.decrement: 
                            id: fan_idle_running # key to get events to queue up new script at right time.
                            cycle: False
                        - switch.turn_off: fan1
                      else:
                        - number.decrement: 
                            id: fan_idle_running
                            cycle: False
                        - logger.log:
                            level: WARN
                            format: "On Fan Idle attempted to stop fan while non-idle climate state: %d"
                            args: ["id(therm_control1).action"] 
                else:
                  - number.decrement: 
                      id: fan_idle_running
                      cycle: False
                  - logger.log:
                      level: WARN
                      format: "On Fan Idle attempted to start fan while non-idle climate state: %d"
                      args: ["id(therm_control1).action"]
            - number.decrement: 
                id: fan_idle_running
                cycle: False
            - logger.log:
                format: "Completed: Run Before run delay: %d min after run delay %d min." 
                args: ["int(id(fan_wait_min_idle).state)", "int(id(fan_run_min_idle).state)"]
                level: DEBUG
          else:
            - logger.log: 
                format: "Fan On Idle is not supposed to run. Climate state: %d and mode: %d"
                level: WARN
                args: ["id(therm_control1).action", "id(therm_control1).mode"]
            - script.stop: fan_duty_script
      - number.decrement: 
          id: fan_idle_running
          cycle: False

  - id: check_fan_idle_script
    then:
      - if: #Check current state of climate action. If not idle then make sure script is not running.
          condition:
            - lambda: return (id(therm_control1).action != CLIMATE_ACTION_IDLE && int(id(fan_idle_running).state) > 0) || id(therm_control1).mode == CLIMATE_MODE_OFF;
          then: # should not run script here so stop it.
            - logger.log: 
                level: DEBUG
                format: "Not in idle so stoping script. Current climate state: %d, mode: %d"
                args: ["id(therm_control1).action", "id(therm_control1).mode"]
            - script.stop: fan_duty_script
            - number.to_min: fan_idle_running
        
      - if:
          condition:
              and:
                - switch.is_on: run_fan_on_idle
                - lambda: return id(therm_control1).action == CLIMATE_ACTION_IDLE && id(therm_control1).mode != CLIMATE_MODE_OFF;
          then:
            - if:
                condition:
                  or:
                    - lambda: return int(id(fan_idle_running).state) == 0;
                    - not:
                      - script.is_running: fan_duty_script
                then:
                  - logger.log: 
                      level: DEBUG
                      format: "Fan Script is not running turning on script."
                  - number.to_min: fan_idle_running
                  - script.execute:
                      id: fan_duty_script
                else:
                  - logger.log: 
                      level: DEBUG 
                      format: "Skipping fan script is already running and enabled. Current climate state: %d, mode: %d"
                      args: ["id(therm_control1).action", "id(therm_control1).mode"]
          else:
            - if:
                condition: 
                  - script.is_running: fan_duty_script
                then:
                  - logger.log: 
                      level: DEBUG
                      format: "Fan idle is disabled or climate not idle state so turning off fan idle script. Current climate state: %d, mode: %d"
                      args: ["id(therm_control1).action", "id(therm_control1).mode"]
                  - script.stop: fan_duty_script
                  - number.to_min: fan_idle_running # need to reset this in this case so it can be script restarted if something changes with climate.
                  - if: # also turn fan off if it is running here...
                      condition: 
                        and:
                          - switch.is_on: fan1
                          - lambda: return id(therm_control1).action == CLIMATE_ACTION_IDLE || id(therm_control1).mode == CLIMATE_MODE_OFF;    
                      then: 
                        - logger.log: 
                            level: DEBUG
                            format: "Turning off Fan since climate idle or off. Current climate state: %d, mode: %d"
                            args: ["id(therm_control1).action", "id(therm_control1).mode"]
                        - switch.turn_off: fan1
                else:
                  - logger.log: 
                      level: DEBUG 
                      format: "Fan idle is disable or climate not idle and fan idle script is stopped."
  - id: call_heat_action # made this all C because it is that complex.
    mode: restart
    then:
      - lambda: |-
          if(id(therm_control1).action != CLIMATE_ACTION_HEATING)
          {
            ESP_LOGD("heat_action_script", "Script called when not heating so getting out! Action = %d Mode = %d",  id(therm_control1).action, id(therm_control1).mode);
            return;
          }
          if(id(user_forced_no_hp).state) // user forced no hp so just ignore HP heating by forcing furnace only mode.
          {
            id(force_furnace_mode).turn_on();
            ESP_LOGI("heat_action_script", "Setting force mode based on user force no HP. State of heating level: %d or %s force furnace mode %s", id(heating_level).active_index().value(), id(heating_level).state.c_str(), id(force_furnace_mode).state ? "True" : "False");
          }
          // in heat call always turn off rev valve if on.
          if(id(rev).state){ id(rev).turn_off();}
          auto cur_index = id(heating_level).active_index();
          int index = -1;
          if (!cur_index.has_value()) { 
            // should not get here but anyway if I do set it to idle state.
            index = 0;
            auto call = id(heating_level).make_call();
            call.set_index(index);
            call.perform();
            ESP_LOGD("heat_action_script", "Setting heating_level to index 0");
          }else{
            index = cur_index.value();
          }
          if(id(out_temp_ok_in).state && !id(force_furnace_mode).state) // Not too cold for HP so all conditions for possible HP in this if. Or HP just taking to long and it is forced over to Furnace only mode
          {
            // Clear up and Furnace heat states.
            if(index > 2)
            { // just switch it over to HP levels. For now can just subtract 2
              index -= 2;
            }
            if(id(w2).state){ id(w2).turn_off();}
            if(!id(in_defrost_mode).state) // if not running defrost turn off furnace heat low.
            { 
              if(id(w1).state){ id(w1).turn_off();}   
            } 
            if( index == 0) // Currently idle and not too cold for HP so turn on Heatpump Heat Low
            {
              index = 1;
              if(id(w2).state){ id(w2).turn_off();}
              if(id(w1).state){ id(w1).turn_off();}
              if(id(furn_cool_high).state){id(furn_cool_high).turn_off();}
              if(!id(furn_cool_low).state){id(furn_cool_low).turn_on();}
              if(id(comp2).state){ id(comp2).turn_off();}
              id(comp1).turn_on();
              auto call = id(heating_level).make_call();
              call.set_index(index);
              call.perform();
            } else if (index == 1) // HP On low and warm enough for HP High so do that.
            { 
              if(int(id(in_defrost_mode).state) == 0) // If not in defrost mode move up a level in heat.
              {
                index = 2;
                auto call = id(heating_level).make_call();
                id(comp1).turn_on();
                id(comp2).turn_on();
                if(id(furn_cool_high).state){id(furn_cool_high).turn_off();}
                if(!id(furn_cool_low).state){id(furn_cool_low).turn_on();}
                // set to HP High Heat 
                call.set_index(index);
                call.perform();
              }
            } else {
              if(!id(comp1).state){id(comp1).turn_on();}
              if(!id(comp2).state){id(comp2).turn_on();}
              if(id(furn_cool_high).state){id(furn_cool_high).turn_off();}
              if(!id(furn_cool_low).state){id(furn_cool_low).turn_on();}
              ESP_LOGI("heat_action_script", "HP is giving it all the BTU's she's got captin! Forced to switch to furnace only mode!", index, id(heating_level).state.c_str()); 
              id(force_furnace_mode).turn_on();
            }
          }
          // Resetting index here just in case I missed it in above scripts.
          cur_index = id(heating_level).active_index();
          index = cur_index.value();
          if(!id(out_temp_ok_in).state || id(force_furnace_mode).state) 
          { // in Furnace temp level right now so turn off all hp if running.
              if(id(comp1).state){ id(comp1).turn_off();}
              if(id(comp2).state){ id(comp2).turn_off();}
              if(id(furn_cool_high).state){id(furn_cool_high).turn_off();}
              if(id(furn_cool_low).state){id(furn_cool_low).turn_off();}

          
              if (index < 3) // Currently idle and too cold for HP so turn on Furnace Heat Low 
              {
                index = 3;
                if(id(w2).state){ id(w2).turn_off();}      
                id(w1).turn_on();
                auto call = id(heating_level).make_call();
                // set to Furnace 
                call.set_index(index);
                call.perform();
              } else if(index == 3)
              {
                if(!id(w1).state){ id(w1).turn_on();} 
                if(int(id(in_defrost_mode).state) == 0) // If not in defrost mode move up a level in heat.
                {
                  index = 4;
                  id(w2).turn_on();   
                  auto call = id(heating_level).make_call();
                  // set to Furnace 
                  call.set_index(index);
                  call.perform();
                }
              } else if(index == 4) 
              {
                if(!id(w2).state){ id(w2).turn_on();}
                ESP_LOGI("heat_action_script", "She is giving it all the BTU's she's got captin! at state index: %d or %s", index, id(heating_level).state.c_str());
              }
          }
          cur_index = id(heating_level).active_index();
          // Info log the current state of heat.
          ESP_LOGI("heat_action_script", "Setting heating_level to index %d or %s", cur_index.value(), id(heating_level).state.c_str());

climate:
  - platform: thermostat
    name: "Thermostat Climate Controller"
    id: therm_control1
    sensor: current_temperature
    set_point_minimum_differential: .5 °F
    min_cooling_off_time: 3min
    min_cooling_run_time: 5min
    min_heating_off_time: 3min
    min_heating_run_time: 3min
    min_fanning_run_time: 3min
    min_fanning_off_time: 3min
    max_heating_run_time: 30min
    max_cooling_run_time: 30min
    startup_delay: True
    heat_deadband: .2 °F
    heat_overrun: 0.0 °F
    cool_overrun: .1 °F
    cool_deadband: .3 °F
    supplemental_cooling_delta: .6 °F
    supplemental_heating_delta: .5 °F
    min_idle_time: 30s
    fan_with_cooling: True
    fan_with_heating: True
    off_mode:
      - switch.turn_off: rev
      - switch.turn_off: furn_cool_low
      - switch.turn_off: furn_cool_high
      - switch.turn_off: comp1
      - switch.turn_off: comp2
      - switch.turn_off: w2
      - switch.turn_off: w1
      - switch.turn_off: fan1
      - switch.turn_off: force_furnace_mode
  
    fan_only_mode:
      then:
        - switch.turn_off: rev
        - switch.turn_off: comp1
        - switch.turn_off: comp2
        - switch.turn_off: w2
        - switch.turn_off: w1
        - switch.turn_off: fan1
        - delay: 1s  
        - switch.turn_on: fan1
        - switch.turn_off: force_furnace_mode
        - select.set_index:
            id: heating_level
            index: 0
    cool_action:
      then:
        - switch.turn_on: furn_cool_low
        - switch.turn_off: furn_cool_high
        - switch.turn_off: w2
        - switch.turn_off: w1
        - switch.turn_off: comp2
        - switch.turn_on: rev
        - switch.turn_on: comp1
        - switch.turn_off: force_furnace_mode
        - select.set_index:
            id: heating_level
            index: 0
        - logger.log:
            level: DEBUG
            format: "Called for cooling." 
           
    heat_action:
      then:
        - script.execute: call_heat_action

    supplemental_heating_action:
      then:
        - script.execute: call_heat_action

    supplemental_cooling_action:
      then:
        - switch.turn_off: force_furnace_mode
        - select.set_index:
            id: heating_level
            index: 0
        - switch.turn_on: furn_cool_low
        - switch.turn_on: furn_cool_high
        - switch.turn_off: w2
        - switch.turn_off: w1
        - switch.turn_on: rev
        - switch.turn_on: comp1
        - switch.turn_on: comp2
        - logger.log:
            level: DEBUG
            format: "Called for extra cooling." 
              
    fan_only_action:
      then:
        - switch.turn_on: fan1
        - if:
            condition:
              - script.is_running: fan_duty_script
            then:
              - logger.log: 
                  format: Stopping Fan Script.
                  level: DEBUG
              - script.stop: fan_duty_script
        - logger.log:
            level: DEBUG
            format: "Fan only action called." 
    idle_action:
      - switch.turn_off: force_furnace_mode
      - select.set_index:
          id: heating_level
          index: 0
      - switch.turn_off: rev
      - switch.turn_off: furn_cool_low
      - switch.turn_off: furn_cool_high
      - switch.turn_off: comp1
      - switch.turn_off: comp2
      - switch.turn_off: w2
      - switch.turn_off: w1
      - switch.turn_off: fan1
      - if:
          condition:
            not:
              - script.is_running: fan_duty_script
          then:
            - logger.log: 
                format: Fan Script is not running!
                level: DEBUG
            - script.execute:
                id: check_fan_idle_script
          else:
              - logger.log: 
                  format: Skipping fan script is already running!
                  level: INFO
      - logger.log:
            level: DEBUG
            format: "Idle action ran." 

    default_preset: Home
    preset:
      - name: Home
        default_target_temperature_low: 73 °F
        default_target_temperature_high: 75.0 °F
    on_control: 
      then:
        - number.increment: 
            id: check_state_after_min
            cycle: False
          
        
    
    